ConcurrencyStudies.cpp revision 3.01 Build 1 built on Aug  8 2025 at 16:08:20

  This version of the program simulates multiple producer threads concurrently
storing messages to a queue, which is then dequeued by multiple consumer threads.
Each message has a variable delay time that the consumer should wait before 
retiring a message to a 'retired' queue



void sumUsingFunction()
    number of threads:   1 result:       499999999500000000 elapsed time:  2744ms
    number of threads:  23 result:       499999999500000000 elapsed time:  1717ms
    number of threads: 211 result:       499999999500000000 elapsed time:   554ms
    number of threads: 256 result:       499999999500000000 elapsed time:   638ms

void sumUsingFunctor()
    number of threads:   1 result:       499999999500000000 elapsed time:  2698ms
    number of threads:  23 result:       499999999500000000 elapsed time:   565ms
    number of threads: 211 result:       499999999500000000 elapsed time:   449ms
    number of threads: 256 result:       499999999500000000 elapsed time:   441ms

void sumUsingLambdas()
    number of threads:   1 result:       499999999500000000 elapsed time:  2309ms
    number of threads:  23 result:       499999999500000000 elapsed time:  1500ms
    number of threads: 211 result:       499999999500000000 elapsed time:   744ms
    number of threads: 256 result:       499999999500000000 elapsed time:   729ms

void sumUsingAsyncFunction()
    number of threads:   1 result:       499999999500000000 elapsed time:  2586ms
    number of threads:  23 result:       499999999500000000 elapsed time:   485ms
    number of threads: 211 result:       499999999500000000 elapsed time:   471ms
    number of threads: 256 result:       499999999500000000 elapsed time:   480ms

void sumUsingAsyncFunctor()
    number of threads:   1 result:       499999999500000000 elapsed time:  2739ms
    number of threads:  23 result:       499999999500000000 elapsed time:   509ms
    number of threads: 211 result:       499999999500000000 elapsed time:   443ms
    number of threads: 256 result:       499999999500000000 elapsed time:   449ms

void sumUsingLambdas()
    number of threads:   1 result:       499999999500000000 elapsed time:  2142ms
    number of threads:  23 result:       499999999500000000 elapsed time:   432ms
    number of threads: 211 result:       499999999500000000 elapsed time:   425ms
    number of threads: 256 result:       499999999500000000 elapsed time:   428ms


ConcurrencyStudies.cpp exiting
